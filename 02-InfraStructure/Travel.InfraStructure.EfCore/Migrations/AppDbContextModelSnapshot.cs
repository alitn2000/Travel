// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel.InfraStructure.EfCore.Common;

#nullable disable

namespace Travel.InfraStructure.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Travel.Domain.Core.Entities.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChekListType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChekListType = "A",
                            TripType = 4
                        },
                        new
                        {
                            Id = 2,
                            ChekListType = "B",
                            TripType = 1
                        },
                        new
                        {
                            Id = 3,
                            ChekListType = "C",
                            TripType = 2
                        },
                        new
                        {
                            Id = 4,
                            ChekListType = "D",
                            TripType = 3
                        },
                        new
                        {
                            Id = 5,
                            ChekListType = "F",
                            TripType = 5
                        });
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.CheckListTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckListId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("TripId");

                    b.ToTable("CheckListTrips");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TripType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserNameType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "+989102123542",
                            UserNameType = 0
                        },
                        new
                        {
                            Id = 2,
                            UserName = "test@gmail.com",
                            UserNameType = 1
                        },
                        new
                        {
                            Id = 3,
                            UserName = "+989102123543",
                            UserNameType = 0
                        });
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.CheckListTrip", b =>
                {
                    b.HasOne("Travel.Domain.Core.Entities.CheckList", "CheckList")
                        .WithMany("CheckListTrips")
                        .HasForeignKey("CheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Domain.Core.Entities.Trip", "Trip")
                        .WithMany("CheckListTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckList");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.Profile", b =>
                {
                    b.HasOne("Travel.Domain.Core.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Travel.Domain.Core.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.Trip", b =>
                {
                    b.HasOne("Travel.Domain.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.CheckList", b =>
                {
                    b.Navigation("CheckListTrips");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.Trip", b =>
                {
                    b.Navigation("CheckListTrips");
                });

            modelBuilder.Entity("Travel.Domain.Core.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
